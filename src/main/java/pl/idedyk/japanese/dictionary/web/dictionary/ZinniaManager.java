package pl.idedyk.japanese.dictionary.web.dictionary;

import java.io.File;
import java.util.ArrayList;
import java.util.List;

import javax.annotation.PostConstruct;
import javax.annotation.PreDestroy;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.xdump.android.zinnia.Zinnia;

import pl.idedyk.japanese.dictionary.api.dto.KanjiRecognizerResultItem;

// INFO: FreeBSD: obejscie problemu (jesli wystepuje) z libzinniajni.so: Undefined symbol "zinnia_recognizer_new"
// export LD_LIBRARY_PATH=/katalog_do_pliku libzinnia.so

// kompilowanie (native) w FreeBSD:
// g++49 -shared -DHAVE_CONFIG_H -fPIC param.cpp recognizer.cpp svm.cpp sexp.cpp feature.cpp libzinnia.cpp character.cpp trainer.cpp -lm -lstdc++ -o libzinnia.so
// g++49 -fPIC -Wall -shared libzinniajni.cpp -o libzinniajni.so -lm -lstdc++ -I/usr/local/openjdk7/include -I/usr/local/openjdk7/include/freebsd libzinnia.so

@Service
public class ZinniaManager {
	
	private static final Logger logger = LogManager.getLogger(ZinniaManager.class);
	
	private String zinniaArch;
	
	private String libzinnia;
	private String libzinniajni;
	
	private boolean nativeLibInitialized = false;
	
	private Zinnia zinnia = new Zinnia();
	
	private long zinniaHandler = 0;
	
	private boolean initialized = false;

	@Value("${db.dir}")
	private String dbDir;
	
	@PostConstruct
	public void init() {

		initialized = false;
		
		logger.info("Inicjalizacja Zinnia Manager");
		
		if (nativeLibInitialized == false) {

			String libZinniaPath = ZinniaManager.class.getResource("/zinnia/" + zinniaArch + "/" + libzinnia).getPath();
			String libZinniaJniPath = ZinniaManager.class.getResource("/zinnia/" + zinniaArch + "/" + libzinniajni).getPath();
			
			System.load(libZinniaPath);
			System.load(libZinniaJniPath);

			nativeLibInitialized = true;			
		}		
		
		String kanjiRecognizeModelDbPath = new File(dbDir, "kanji_recognizer.model.db").getPath();
		
		zinniaHandler = zinnia.zinnia_recognizer_new();
		
		int zinniaRecognizerOpenResult = zinnia.zinnia_recognizer_open(zinniaHandler, kanjiRecognizeModelDbPath);
		
		if (zinniaRecognizerOpenResult == 0) {
			throw new RuntimeException("Nie moge zainicjalizowac Zinnia Manager: " + zinnia.zinnia_recognizer_strerror(zinniaHandler));
		}
		
		initialized = true;
		
		logger.info("Zakonczono inicjalizacje Zinnia Manager");		
	}
	
	@PreDestroy
	public void destroy() {
		zinnia.zinnia_recognizer_destroy(zinniaHandler);
	}
	
	public void waitForDatabaseReady() {
		
		if (initialized == true) {
			return;
		}
		
		while (true) {
						
			try {
				Thread.sleep(300);
				
			} catch (InterruptedException e) {
				// noop
			}
			
			if (initialized == true) {
				return;
			}			
		}		
	}
	
	public void reload() {
		
		try {
			Thread.sleep(2000);
			
		} catch (InterruptedException e) {
			// noop
		}
				
		initialized = false;
				
		logger.info("Zablokowano bazę danych zinnia. Czekanie 8 sekund na rozpoczęcie procedury przeładowania bazy");
		
		try {
			Thread.sleep(8000);
			
			destroy();
			
		} catch (Exception e) {
			// noop
		}
		
		zinnia = new Zinnia();
		
		zinniaHandler = 0;
		
		init();		
	}
		
	public Character createNewCharacter() {
		
		waitForDatabaseReady();
				
		return new Character();		
	}
	
	public class Character {
		
		private long character;
		
		private Character() {
			character = zinnia.zinnia_character_new();
		}
		
		public void clear() {
			
			waitForDatabaseReady();
			
			zinnia.zinnia_character_clear(character);
		}
		
		public void setWidth(int width) {
			
			waitForDatabaseReady();
			
			zinnia.zinnia_character_set_width(character, width);
		}
		
		public void setHeight(int width) {
			
			waitForDatabaseReady();
			
			zinnia.zinnia_character_set_height(character, width);
		}
		
		public void add(int strokeNo, int x, int y) {
			
			waitForDatabaseReady();
			
			zinnia.zinnia_character_add(character, strokeNo, x, y);
		}
		
		public List<KanjiRecognizerResultItem> recognize(int limit) {
			
			waitForDatabaseReady();
			
			List<KanjiRecognizerResultItem> result = new ArrayList<KanjiRecognizerResultItem>();
			
			long recognizerResult = zinnia.zinnia_recognizer_classify(zinniaHandler, character, limit);

			if (recognizerResult != 0) {
				
				for (int i = 0; i < zinnia.zinnia_result_size(recognizerResult); ++i) {						
					result.add(new KanjiRecognizerResultItem(zinnia.zinnia_result_value_from_int_array_to_string(recognizerResult, i), zinnia.zinnia_result_score(recognizerResult, i)));
				}
				
				zinnia.zinnia_result_destroy(recognizerResult);
			}
			
			return result;
		}
		
		public void destroy() {
			
			waitForDatabaseReady();
			
			zinnia.zinnia_character_destroy(character);
		}
	}
	
	public String getZinniaArch() {
		return zinniaArch;
	}

	public void setZinniaArch(String zinniaArch) {	
		this.zinniaArch = zinniaArch;
	}

	public String getLibzinnia() {
		return libzinnia;
	}

	public void setLibzinnia(String libzinnia) {
		this.libzinnia = libzinnia;
	}

	public String getLibzinniajni() {
		return libzinniajni;
	}

	public void setLibzinniajni(String libzinniajni) {
		this.libzinniajni = libzinniajni;
	}
	
	/*
	public static void main(String[] args) throws Exception {
				
		ZinniaManager zinniaManager = new ZinniaManager();
		
		zinniaManager.setZinniaArch("linux_x86_64");
		zinniaManager.setLibzinnia("libzinnia.so");
		zinniaManager.setLibzinniajni("libzinniajni.so");
		
		zinniaManager.dbDir = "/usr/home/dedyk/java/JapaneseDictionaryWeb-tomcat/tomcat/DB/20180422";
		//zinniaManager.dbDir = "/tmp/a/nowy";
		
		zinniaManager.init();
		
		//
		
		String  strokes = "131.5,446.6669921875;133.16700744628906,434.1669921875;134,427.5;134,425.8330078125;134,421.6669921875;134,419.1669921875;134,417.5;133,415;134,413.3330078125;134,410.8330078125;134,409.1669921875;134,406.6669921875;134,402.5;134,400.8330078125;133,400;134,398.3330078125;134,396.6669921875;133,395;134,394.1669921875;134,393.3330078125;134,391.6669921875;134,390.8330078125;133,390;134,389.1669921875;134.83299255371094,389.1669921875;134.83299255371094,388.3330078125;135.66700744628906,387.5;136.5,387.5;137.33299255371094,386.6669921875;139,386.6669921875;140.66700744628906,385.8330078125;141.5,385.8330078125;143.16700744628906,385.8330078125;146,385;149,385;153,385;155,385;158,385;163,385;168,385;170,385;175,385;180,385;183,385;188,385;192,385;197,385;201,385;206,385;210,385;216,385;221,385;229,385;234,386;236.5,386.6669921875;242.3330078125,386.6669921875;248.1669921875,387.5;253.1669921875,387.5;256.5,387.5;263.1669921875,387.5;270.6669921875,387.5;275.6669921875,388.3330078125;279,388;283.1669921875,389.1669921875;289,390;294,390;299,391;301.5,391.6669921875;306.5,392.5;310.6669921875,393.3330078125;316.5,393.3330078125;318.1669921875,393.3330078125;321.5,394.1669921875;324.8330078125,394.1669921875;327.3330078125,394.1669921875;329.8330078125,394.1669921875;331.5,394.1669921875;334,394.1669921875;335.6669921875,394.1669921875;338.1669921875,394.1669921875;339,394.1669921875;340.6669921875,394.1669921875;342.3330078125,394.1669921875;344,394.1669921875;344,395;345,395;346,395;347.3330078125,395.8330078125;347.3330078125,396.6669921875;348.1669921875,396.6669921875;348.1669921875,397.5;348.1669921875,399.1669921875;348.1669921875,400.8330078125;348.1669921875,402.5;348.1669921875,406.6669921875;348.1669921875,410.8330078125;348,415;348.1669921875,419.1669921875;348.1669921875,421.6669921875;347.3330078125,425.8330078125;346.5,429.1669921875;346.5,433.3330078125;345,435;344.8330078125,439.1669921875;344,442.5;344,445.8330078125;343.1669921875,448.3330078125;343,450;342.3330078125,452.5;342.3330078125,454.1669921875;342.3330078125,456.6669921875;342.3330078125,457.5;341.5,459.1669921875;341.5,462.5;341.5,463.3330078125;341.5,464.1669921875;\n" + 
				"147.33299255371094,429.1669921875;158,435;159,435.8330078125;164,435.8330078125;169,435.8330078125;170.66700744628906,435.8330078125;176.5,436.6669921875;181.5,437.5;185.66700744628906,437.5;189.83299255371094,437.5;192.33299255371094,437.5;195.6669921875,438.3330078125;199.8330078125,438.3330078125;204,438;205.6669921875,438.3330078125;209,438;213.1669921875,438.3330078125;217.3330078125,438.3330078125;221.5,438.3330078125;225.6669921875,438.3330078125;229.8330078125,438.3330078125;233.1669921875,438.3330078125;238.1669921875,438.3330078125;240.6669921875,437.5;244.8330078125,437.5;248.1669921875,437.5;252.3330078125,436.6669921875;256.5,436.6669921875;259,436;262.3330078125,435.8330078125;267.3330078125,435.8330078125;272.3330078125,435.8330078125;274.8330078125,435.8330078125;279,435;283,435;288,435;290,435;294,435;299,435;302,435;305,435;307,435;313,435;316,435;320,435;322,435;325,435;328,435;330.6669921875,435.8330078125;333.1669921875,435.8330078125;334,435.8330078125;335.6669921875,435.8330078125;338.1669921875,435.8330078125;339.8330078125,435.8330078125;340.6669921875,435.8330078125;342.3330078125,435.8330078125;344,435.8330078125;345.6669921875,436.6669921875;347.3330078125,436.6669921875;348.1669921875,436.6669921875;\n" + 
				"247,160;243,170;243.1669921875,174.1669921875;243.1669921875,178.3330078125;242.3330078125,182.5;242.3330078125,185.8330078125;241.5,189.1669921875;241.5,193.3330078125;241.5,196.6669921875;240.6669921875,200.8330078125;240,205;240.6669921875,206.6669921875;239.8330078125,210.8330078125;239,215;239,219;239,221;238.1669921875,225.8330078125;237.3330078125,231.6669921875;237.3330078125,236.6669921875;237,240;236.5,241.6669921875;236.5,245.8330078125;236,250;236,255;236.5,257.5;236.5,262.5;236.5,268.3330078125;236.5,273.3330078125;236.5,275.8330078125;236.5,280.8330078125;236.5,285.8330078125;236.5,289.1669921875;236.5,294.1669921875;236.5,295.8330078125;236.5,300.8330078125;236.5,307.5;236.5,313.3330078125;236.5,315.8330078125;236.5,320.8330078125;236.5,325;237.3330078125,330.8330078125;237.3330078125,335;237.3330078125,336.6669921875;237.3330078125,339.1669921875;237.3330078125,343.3330078125;237.3330078125,345.8330078125;237.3330078125,347.5;237.3330078125,349.1669921875;237.3330078125,351.6669921875;237.3330078125,353.3330078125;237.3330078125,355;237.3330078125,355.8330078125;237.3330078125,357.5;237.3330078125,359.1669921875;237.3330078125,360.8330078125;237.3330078125,361.6669921875;238.1669921875,362.5;238.1669921875,364.1669921875;238.1669921875,365;238.1669921875,365.8330078125;238.1669921875,366.6669921875;238.1669921875,366.6669921875;\n" + 
				"89,340;100.66700744628906,342.5;102.33299255371094,342.5;104,343;106.5,343.3330078125;108.16700744628906,344.1669921875;111.5,344.1669921875;114,344;116.5,345;120.66700744628906,345;122.33299255371094,345;125.66700744628906,345.8330078125;129.83299255371094,345.8330078125;134,345.8330078125;135.66700744628906,345.8330078125;139.83299255371094,346.6669921875;144,346.6669921875;147.33299255371094,346.6669921875;151.5,346.6669921875;153.16700744628906,346.6669921875;157.33299255371094,346.6669921875;160.66700744628906,346.6669921875;164.83299255371094,346.6669921875;167.33299255371094,346.6669921875;172.33299255371094,346.6669921875;177.33299255371094,346.6669921875;179.83299255371094,346.6669921875;184,346.6669921875;184.83299255371094,346.6669921875;187.33299255371094,346.6669921875;191.5,347.5;194,347.5;195.6669921875,347.5;199,347;202.3330078125,347.5;206.5,347.5;209.8330078125,347.5;214,347;218.1669921875,347.5;224.8330078125,348.3330078125;229.8330078125,348.3330078125;232.3330078125,348.3330078125;238.1669921875,348.3330078125;242.3330078125,348.3330078125;247.3330078125,348.3330078125;259,348;261.5,348.3330078125;267.3330078125,348.3330078125;272.3330078125,348.3330078125;274.8330078125,348.3330078125;280.6669921875,348.3330078125;284.8330078125,349.1669921875;290.6669921875,349.1669921875;292.3330078125,349.1669921875;297.3330078125,350;303.1669921875,350;308.1669921875,350.8330078125;313.1669921875,350.8330078125;315.6669921875,350.8330078125;321.5,350.8330078125;326.5,351.6669921875;330.6669921875,351.6669921875;332.3330078125,351.6669921875;338.1669921875,352.5;343.1669921875,352.5;348.1669921875,352.5;353.1669921875,353.3330078125;354.8330078125,353.3330078125;360.6669921875,353.3330078125;365.6669921875,354.1669921875;370.6669921875,354.1669921875;373.1669921875,354.1669921875;376.5,355;380.6669921875,355;383.1669921875,355;384.8330078125,355;388.1669921875,355.8330078125;389.8330078125,355.8330078125;392.3330078125,355.8330078125;394.8330078125,355.8330078125;395.6669921875,355.8330078125;397.3330078125,355.8330078125;399,356.6669921875;400.6669921875,356.6669921875;\n" + 
				"109.83299255371094,180.8330078125;114,170;114,169;114,168;114,166;114,165;114,163;114,162;114,160;114,159;114,157;114,157;114,155;114,155;114,154;114,153;114,152;114,151;114,150;114,150;114,150;115.66700744628906,149.1669921875;116.5,149.1669921875;117.33299255371094,149.1669921875;118.16700744628906,149.1669921875;119.83299255371094,148.3330078125;121.5,148.3330078125;123.16700744628906,148.3330078125;126.5,148.3330078125;130.66700744628906,147.5;132.33299255371094,147.5;136.5,147.5;140.66700744628906,147.5;144,147.5;147.33299255371094,147.5;149,147.5;152.33299255371094,147.5;155.66700744628906,147.5;158.16700744628906,147.5;159.83299255371094,147.5;161.5,147.5;166.5,146.6669921875;169.83299255371094,146.6669921875;174,146.6669921875;176.5,146.6669921875;181.5,146.6669921875;184.83299255371094,146.6669921875;189,147.5;190.66700744628906,147.5;195.6669921875,148.3330078125;199,148;202.3330078125,149.1669921875;204,149;206.5,149.1669921875;209.8330078125,149.1669921875;212,150;217,150;218,150;220,150;226.5,150.8330078125;229,150;230.6669921875,150.8330078125;234,151;236.5,151.6669921875;239,151;241.5,152.5;243.1669921875,152.5;244.8330078125,152.5;248.1669921875,153.3330078125;250.6669921875,153.3330078125;252.3330078125,153.3330078125;254,153;257.3330078125,154.1669921875;259,154;261.5,154.1669921875;262.3330078125,154.1669921875;264,155;267,155;269,155;270,155;273,155;275,155;278.1669921875,155.8330078125;279.8330078125,155.8330078125;281.5,155.8330078125;284,155;286.5,155.8330078125;288.1669921875,155.8330078125;289,155;291.5,156.6669921875;293.1669921875,156.6669921875;295.6669921875,156.6669921875;296.5,156.6669921875;299,156;300.6669921875,157.5;302.3330078125,157.5;304.8330078125,157.5;305.6669921875,157.5;307.3330078125,157.5;309.8330078125,157.5;311.5,158.3330078125;312.3330078125,158.3330078125;314.8330078125,158.3330078125;316.5,158.3330078125;319,158;320.6669921875,158.3330078125;321.5,159.1669921875;324,159.1669921875;325.6669921875,159.1669921875;327.3330078125,159.1669921875;328.1669921875,159.1669921875;330.6669921875,159.1669921875;332.3330078125,159.1669921875;334,159.1669921875;335,160;337,160;338,160;340,160;342,160;343,160;344.8330078125,160.8330078125;346.5,160.8330078125;348.1669921875,160.8330078125;349,160.8330078125;350.6669921875,160.8330078125;352.3330078125,160.8330078125;354,160.8330078125;354.8330078125,161.6669921875;355.6669921875,161.6669921875;357.3330078125,161.6669921875;358.1669921875,161.6669921875;359,161.6669921875;359.8330078125,161.6669921875;360.6669921875,161.6669921875;361.5,161.6669921875;362.3330078125,161.6669921875;363.1669921875,161.6669921875;364,161.6669921875;364.8330078125,161.6669921875;365.6669921875,162.5;366.5,162.5;367.3330078125,162.5;368.1669921875,162.5;369,162.5;369.8330078125,162.5;370.6669921875,162.5;371.5,162.5;372.3330078125,162.5;373.1669921875,162.5;374,162.5;374,162.5;374.8330078125,162.5;375.6669921875,162.5;376.5,162.5;377.3330078125,162.5;378.1669921875,162.5;379,162.5;379.8330078125,162.5;380.6669921875,162.5;380.6669921875,162.5;381.5,162.5;382.3330078125,162.5;382.3330078125,163.3330078125;382.3330078125,164.1669921875;383.1669921875,164.1669921875;383,165;383.1669921875,165.8330078125;383.1669921875,166.6669921875;383.1669921875,167.5;383.1669921875,168.3330078125;383.1669921875,169.1669921875;383,170;383.1669921875,171.6669921875;383.1669921875,173.3330078125;383.1669921875,174.1669921875;383,175;383.1669921875,176.6669921875;383.1669921875,178.3330078125;383.1669921875,179.1669921875;383,180;383.1669921875,181.6669921875;382.3330078125,183.3330078125;382,185;382.3330078125,185.8330078125;382.3330078125,187.5;382.3330078125,189.1669921875;382.3330078125,190.8330078125;382.3330078125,191.6669921875;382.3330078125,193.3330078125;382.3330078125,195.8330078125;382.3330078125,196.6669921875;382.3330078125,197.5;382.3330078125,199.1669921875;382.3330078125,200.8330078125;382.3330078125,202.5;382.3330078125,203.3330078125;382.3330078125,204.1669921875;382,205;382.3330078125,206.6669921875;382.3330078125,207.5;382.3330078125,208.3330078125;382.3330078125,209.1669921875;382,210;381.5,210.8330078125;380.6669921875,210.8330078125;379.8330078125,210.8330078125;379,210.8330078125;378.1669921875,210.8330078125;378.1669921875,210.8330078125;377.3330078125,210.8330078125;375.6669921875,210.8330078125;374.8330078125,210.8330078125;374,210.8330078125;373.1669921875,210.8330078125;371.5,210.8330078125;369.8330078125,210.8330078125;369,210.8330078125;368.1669921875,210.8330078125;366.5,210.8330078125;365.6669921875,210.8330078125;364,210.8330078125;363.1669921875,210.8330078125;362.3330078125,210.8330078125;360.6669921875,210.8330078125;359.8330078125,210.8330078125;359,210.8330078125;358.1669921875,210.8330078125;357.3330078125,210.8330078125;357.3330078125,210.8330078125;\n" + 
				"126.5,186.6669921875;137.33299255371094,190.8330078125;138.16700744628906,190.8330078125;139.83299255371094,190.8330078125;140.66700744628906,191.6669921875;142.33299255371094,191.6669921875;144,191.6669921875;144.83299255371094,191.6669921875;145.66700744628906,191.6669921875;146.5,191.6669921875;\n" + 
				"117.33299255371094,182.5;\n" + 
				"259,115;255.6669921875,126.6669921875;255.6669921875,130.8330078125;254.8330078125,135.8330078125;254.8330078125,137.5;254,140;253,145;252.3330078125,147.5;251.5,151.6669921875;249.8330078125,155.8330078125;\n" + 
				"192.33299255371094,198.3330078125;204,199;209.8330078125,199.1669921875;214.8330078125,199.1669921875;221.5,199.1669921875;227.3330078125,199.1669921875;232.3330078125,199.1669921875;235.6669921875,199.1669921875;239,200;242,200;244.8330078125,200.8330078125;247.3330078125,200.8330078125;249,201;249.8330078125,201.6669921875;252.3330078125,202.5;254,202;255.6669921875,203.3330078125;257.3330078125,203.3330078125;259,203;260.6669921875,204.1669921875;263.1669921875,204.1669921875;\n" + 
				"169.83299255371094,239.1669921875;184,242.5;187.33299255371094,242.5;191.5,242.5;197.3330078125,242.5;203.1669921875,242.5;206.5,241.6669921875;213.1669921875,241.6669921875;219.8330078125,241.6669921875;226.5,241.6669921875;234,241;236.5,241.6669921875;240.6669921875,241.6669921875;245.6669921875,241.6669921875;249,241;250.6669921875,241.6669921875;254,241;256.5,241.6669921875;260.6669921875,241.6669921875;264,242;265.6669921875,242.5;269,242;273.1669921875,243.3330078125;275.6669921875,243.3330078125;277.3330078125,243.3330078125;279.8330078125,243.3330078125;282.3330078125,243.3330078125;284.8330078125,243.3330078125;286.5,243.3330078125;289,244;291.5,244.1669921875;293.1669921875,244.1669921875;295.6669921875,244.1669921875;296.5,244.1669921875;298.1669921875,244.1669921875;300.6669921875,244.1669921875;302.3330078125,244.1669921875;303.1669921875,244.1669921875;304.8330078125,244.1669921875;306.5,244.1669921875;307.3330078125,244.1669921875;309,244;309.8330078125,244.1669921875;310.6669921875,244.1669921875;312.3330078125,244.1669921875;314,244;314.8330078125,244.1669921875;315.6669921875,244.1669921875;317.3330078125,244.1669921875;319,244;319.8330078125,244.1669921875;320.6669921875,244.1669921875;322.3330078125,244.1669921875;324,244.1669921875;325.6669921875,244.1669921875;326.5,244.1669921875;328.1669921875,244.1669921875;329.8330078125,244.1669921875;331,245;333,245;333,245;335,245;337,245;338,245;339,245;341,245;343,245;344,245.8330078125;344.8330078125,245.8330078125;346.5,245.8330078125;347.3330078125,245.8330078125;348.1669921875,245.8330078125;349,245.8330078125;349.8330078125,245.8330078125;350.6669921875,245.8330078125;351.5,245.8330078125;352.3330078125,245.8330078125;353.1669921875,245.8330078125;354,245.8330078125;354.8330078125,245.8330078125;355.6669921875,245.8330078125;356.5,245.8330078125;357.3330078125,245.8330078125;358.1669921875,245.8330078125;359,245.8330078125;359.8330078125,245.8330078125;359.8330078125,246.6669921875;359.8330078125,247.5;360.6669921875,247.5;360.6669921875,247.5;360.6669921875,248.3330078125;361.5,249.1669921875;361,250;361.5,250.8330078125;361.5,252.5;361.5,253.3330078125;361.5,254.1669921875;361,255;361.5,256.6669921875;361.5,258.3330078125;361,260;361.5,260.8330078125;361.5,261.6669921875;361.5,263.3330078125;361,265;361.5,265.8330078125;361.5,268.3330078125;361.5,270;360.6669921875,271.6669921875;360.6669921875,273.3330078125;360.6669921875,274.1669921875;359.8330078125,275.8330078125;359.8330078125,277.5;359,280;359,280.8330078125;359,281.6669921875;358.1669921875,283.3330078125;358.1669921875,285;357.3330078125,285.8330078125;357.3330078125,286.6669921875;357.3330078125,287.5;356.5,288.3330078125;356.5,289.1669921875;356.5,290;355.6669921875,290.8330078125;355.6669921875,291.6669921875;354.8330078125,291.6669921875;354.8330078125,292.5;354,292.5;353.1669921875,293.3330078125;351.5,293.3330078125;350.6669921875,293.3330078125;349,293.3330078125;347.3330078125,293.3330078125;343.1669921875,293.3330078125;338.1669921875,293.3330078125;336.5,293.3330078125;329.8330078125,293.3330078125;324.8330078125,293.3330078125;318.1669921875,292.5;308.1669921875,290.8330078125;304,289;294.8330078125,289.1669921875;286.5,288.3330078125;275.6669921875,287.5;269.8330078125,287.5;259,286;249,286;241.5,286.6669921875;234,286;229,286;222.3330078125,286.6669921875;214.8330078125,286.6669921875;207.3330078125,285.8330078125;204,285;199.8330078125,285;194.83299255371094,285;189.83299255371094,284.1669921875;188.16700744628906,284.1669921875;183.16700744628906,284.1669921875;177.33299255371094,284.1669921875;170.66700744628906,283.3330078125;165.66700744628906,282.5;162.33299255371094,282.5;157.33299255371094,281.6669921875;153.16700744628906,280.8330078125;149,280;147.33299255371094,280;144.83299255371094,280;141.5,279.1669921875;138.16700744628906,279.1669921875;134.83299255371094,278.3330078125;133.16700744628906,278.3330078125;129.83299255371094,277.5;125.66700744628906,277.5;124,277;121.5,276.6669921875;118.16700744628906,276.6669921875;115.66700744628906,275.8330078125;114,275;111.5,275.8330078125;110.66700744628906,275.8330078125;109,274;107.33299255371094,275;105.66700744628906,275;104.83299255371094,275;104,274;102.33299255371094,275;101.5,274.1669921875;100.66700744628906,274.1669921875;99.83299255371094,273.3330078125;99,272;98.16700744628906,270.8330078125;97.33299255371094,270;97.33299255371094,268.3330078125;96.5,265.8330078125;94.83299255371094,259.1669921875;94,254;93.16700744628906,251.6669921875;92.33299255371094,246.6669921875;92.33299255371094,242.5;92,240;92.33299255371094,237.5;92.33299255371094,235.8330078125;92.33299255371094,234.1669921875;92.33299255371094,232.5;92.33299255371094,230.8330078125;92,230;92.33299255371094,228.3330078125;93.16700744628906,227.5;93.16700744628906,226.6669921875;94,225;94.83299255371094,225.8330078125;96,225;99,225;99,225;102,225;104,225;110,225;114,225;117.33299255371094,225.8330078125;122.33299255371094,226.6669921875;128.16700744628906,227.5;133.16700744628906,228.3330078125;134.83299255371094,229.1669921875;138,230;144,230.8330078125;148.16700744628906,231.6669921875;149.83299255371094,232.5;154.83299255371094,233.3330078125;167.33299255371094,234.1669921875;175.66700744628906,234.1669921875;";

		
		String[] strokesSplited = strokes.split("\n");
		
		KanjiDictionaryDrawStroke kanjiDictionaryDrawStroke = new KanjiDictionaryDrawStroke();
		
		final int maxX = 500;
		final int maxY = 500;

		ZinniaManager.Character character = null;

		try {
			character = zinniaManager.createNewCharacter();

			character.setWidth(maxX);
			character.setHeight(maxY);

			for (int strokePathNo = 0; strokePathNo < strokesSplited.length; ++strokePathNo) {
				
				kanjiDictionaryDrawStroke.newStroke();
				
				String currentStrokePath = strokesSplited[strokePathNo];

				if (currentStrokePath.equals("") == true) {
					break;
				}

				String[] points = currentStrokePath.split(";");

				if (points == null || points.length == 0) {
					throw new Exception("Exception");
				}

				for (String currentPoint : points) {

					if (currentPoint == null) {
						throw new Exception("Exception");
					}
					
					currentPoint = currentPoint.trim();
					
					if (currentPoint.equals("") == true) {
						continue;
					}

					String[] currentPointSplited = currentPoint.split(",");

					if (currentPointSplited == null || currentPointSplited.length != 2) {
						throw new Exception("Exception");
					}
																	
					int pointIdx = currentPointSplited[0].indexOf(".");
					
					if (pointIdx != -1) {
						currentPointSplited[0] = currentPointSplited[0].substring(0, pointIdx);
					}

					pointIdx = currentPointSplited[1].indexOf(".");
					
					if (pointIdx != -1) {
						currentPointSplited[1] = currentPointSplited[1].substring(0, pointIdx);
					}
					
					try {				
						Integer currentPointX = Integer.parseInt(currentPointSplited[0]);

						if (currentPointX < 0 || currentPointX > maxX) {
							throw new Exception("Exception");
						}

						Integer currentPointY = Integer.parseInt(currentPointSplited[1]);

						if (currentPointY < 0 || currentPointY > maxY) {
							throw new Exception("Exception");
						}

						character.add(strokePathNo, currentPointX, currentPointY);
						
						kanjiDictionaryDrawStroke.addPoint(currentPointX, currentPointY);

					} catch (NumberFormatException e) {
						throw new Exception("Exception");
					}				
				}			
			}

			List<KanjiRecognizerResultItem> recognize = character.recognize(100);
			
			for (KanjiRecognizerResultItem kanjiRecognizerResultItem : recognize) {
				
				System.out.println(kanjiRecognizerResultItem.getKanji());
				
			}
						
		} finally {
			if (character != null) {
				character.destroy();
			}
		}		
	}
	*/
}
